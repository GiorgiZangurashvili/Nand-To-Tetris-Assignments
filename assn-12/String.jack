// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int logLength;
    field int maxLen;

    static int DASH;
    static int BACKSPACE;
    static int NEWLINE;
    static int DOUBLEQUOTE;
    static int ZERO;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let DASH = 45;
        let BACKSPACE = 129;
        let NEWLINE = 128;
        let DOUBLEQUOTE = 34;
        let ZERO = 48;
        if(maxLength = 0){
            let maxLength = 1;
        }
        
        let str = Array.new(maxLength);
        //initialize logLength as 0, so that newly created String represents empty String
        let logLength = 0;
        let maxLen = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return logLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        //checks if we are in bounds of memory allocated for String
        if(logLength < maxLen){
            let str[logLength] = c;
            let logLength = logLength + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        //checks if we are in bounds of memory allocated for String
        if(logLength > 0){
            let logLength = logLength - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value, i, unit;
        var boolean isNegative;
        let value = 0;
        let i = 0;
        let isNegative = false;
        //iterate over String
        while(i < logLength + 1){
            if( (i = 0) & (str[i] = DASH)){
                let isNegative = true;
            }else{
                let unit = str[i] - ZERO;
                if((unit > -1) & (unit < 10)){
                    let value = value * 10 + unit;
                }
            }
            let i = i + 1;
        }

        if(isNegative){
            let value = value * -1;
        }
        return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let logLength = 0;

        if(val < 0){
            let val = val * -1;
            do appendChar(DASH);
        }

        do int2String(val);
        return;
    }

    method void int2String(int val){
        var int quotient, remainder;

        let remainder = val - (val / 10 * 10);
        let quotient = val / 10;
        
        if(val < 10){
            do appendChar(remainder + ZERO);
        }else{
            do int2String(quotient);
            do appendChar(remainder + ZERO);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return NEWLINE;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return BACKSPACE;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return DOUBLEQUOTE;
    }
}
